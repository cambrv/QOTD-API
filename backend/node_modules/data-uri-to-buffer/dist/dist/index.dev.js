"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataUriToBuffer = dataUriToBuffer;
exports["default"] = void 0;

/**
 * Returns a `Buffer` instance from the given data URI `uri`.
 *
 * @param {String} uri Data URI to turn into a Buffer instance
 * @returns {Buffer} Buffer instance from Data URI
 * @api public
 */
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  } // strip newlines


  uri = uri.replace(/\r?\n/g, ''); // split the URI up into the "metadata" and the "data" portions

  var firstComma = uri.indexOf(',');

  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError('malformed data: URI');
  } // remove the "data:" scheme and parse the metadata


  var meta = uri.substring(5, firstComma).split(';');
  var charset = '';
  var base64 = false;
  var type = meta[0] || 'text/plain';
  var typeFull = type;

  for (var i = 1; i < meta.length; i++) {
    if (meta[i] === 'base64') {
      base64 = true;
    } else if (meta[i]) {
      typeFull += ";".concat(meta[i]);

      if (meta[i].indexOf('charset=') === 0) {
        charset = meta[i].substring(8);
      }
    }
  } // defaults to US-ASCII only if type is not provided


  if (!meta[0] && !charset.length) {
    typeFull += ';charset=US-ASCII';
    charset = 'US-ASCII';
  } // get the encoded data portion and decode URI-encoded chars


  var encoding = base64 ? 'base64' : 'ascii';
  var data = unescape(uri.substring(firstComma + 1));
  var buffer = Buffer.from(data, encoding); // set `.type` and `.typeFull` properties to MIME type

  buffer.type = type;
  buffer.typeFull = typeFull; // set the `.charset` property

  buffer.charset = charset;
  return buffer;
}

var _default = dataUriToBuffer;
exports["default"] = _default;