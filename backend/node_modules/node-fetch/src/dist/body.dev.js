"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writeToStream = exports.getTotalBytes = exports.extractContentType = exports.clone = exports["default"] = void 0;

var _nodeStream = _interopRequireWildcard(require("node:stream"));

var _nodeUtil = require("node:util");

var _nodeBuffer = require("node:buffer");

var _fetchBlob = _interopRequireDefault(require("fetch-blob"));

var _esmMin = require("formdata-polyfill/esm.min.js");

var _fetchError = require("./errors/fetch-error.js");

var _base = require("./errors/base.js");

var _is = require("./utils/is.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var pipeline = (0, _nodeUtil.promisify)(_nodeStream["default"].pipeline);
var INTERNALS = Symbol('Body internals');
/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */

var Body =
/*#__PURE__*/
function () {
  function Body(body) {
    var _this = this;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? 0 : _ref$size;

    _classCallCheck(this, Body);

    var boundary = null;

    if (body === null) {
      // Body is undefined or null
      body = null;
    } else if ((0, _is.isURLSearchParameters)(body)) {
      // Body is a URLSearchParams
      body = _nodeBuffer.Buffer.from(body.toString());
    } else if ((0, _is.isBlob)(body)) {// Body is blob
    } else if (_nodeBuffer.Buffer.isBuffer(body)) {// Body is Buffer
    } else if (_nodeUtil.types.isAnyArrayBuffer(body)) {
      // Body is ArrayBuffer
      body = _nodeBuffer.Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      // Body is ArrayBufferView
      body = _nodeBuffer.Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof _nodeStream["default"]) {// Body is stream
    } else if (body instanceof _esmMin.FormData) {
      // Body is FormData
      body = (0, _esmMin.formDataToBlob)(body);
      boundary = body.type.split('=')[1];
    } else {
      // None of the above
      // coerce to string then buffer
      body = _nodeBuffer.Buffer.from(String(body));
    }

    var stream = body;

    if (_nodeBuffer.Buffer.isBuffer(body)) {
      stream = _nodeStream["default"].Readable.from(body);
    } else if ((0, _is.isBlob)(body)) {
      stream = _nodeStream["default"].Readable.from(body.stream());
    }

    this[INTERNALS] = {
      body: body,
      stream: stream,
      boundary: boundary,
      disturbed: false,
      error: null
    };
    this.size = size;

    if (body instanceof _nodeStream["default"]) {
      body.on('error', function (error_) {
        var error = error_ instanceof _base.FetchBaseError ? error_ : new _fetchError.FetchError("Invalid response body while trying to fetch ".concat(_this.url, ": ").concat(error_.message), 'system', error_);
        _this[INTERNALS].error = error;
      });
    }
  }

  _createClass(Body, [{
    key: "arrayBuffer",

    /**
     * Decode response as ArrayBuffer
     *
     * @return  Promise
     */
    value: function arrayBuffer() {
      var _ref2, buffer, byteOffset, byteLength;

      return regeneratorRuntime.async(function arrayBuffer$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(consumeBody(this));

            case 2:
              _ref2 = _context.sent;
              buffer = _ref2.buffer;
              byteOffset = _ref2.byteOffset;
              byteLength = _ref2.byteLength;
              return _context.abrupt("return", buffer.slice(byteOffset, byteOffset + byteLength));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "formData",
    value: function formData() {
      var ct, formData, parameters, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, name, value, _ref3, toFormData;

      return regeneratorRuntime.async(function formData$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              ct = this.headers.get('content-type');

              if (!ct.startsWith('application/x-www-form-urlencoded')) {
                _context2.next = 28;
                break;
              }

              formData = new _esmMin.FormData();
              _context2.t0 = URLSearchParams;
              _context2.next = 6;
              return regeneratorRuntime.awrap(this.text());

            case 6:
              _context2.t1 = _context2.sent;
              parameters = new _context2.t0(_context2.t1);
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context2.prev = 11;

              for (_iterator2 = parameters[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                _step2$value = _slicedToArray(_step2.value, 2), name = _step2$value[0], value = _step2$value[1];
                formData.append(name, value);
              }

              _context2.next = 19;
              break;

            case 15:
              _context2.prev = 15;
              _context2.t2 = _context2["catch"](11);
              _didIteratorError2 = true;
              _iteratorError2 = _context2.t2;

            case 19:
              _context2.prev = 19;
              _context2.prev = 20;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 22:
              _context2.prev = 22;

              if (!_didIteratorError2) {
                _context2.next = 25;
                break;
              }

              throw _iteratorError2;

            case 25:
              return _context2.finish(22);

            case 26:
              return _context2.finish(19);

            case 27:
              return _context2.abrupt("return", formData);

            case 28:
              _context2.next = 30;
              return regeneratorRuntime.awrap(Promise.resolve().then(function () {
                return _interopRequireWildcard(require('./utils/multipart-parser.js'));
              }));

            case 30:
              _ref3 = _context2.sent;
              toFormData = _ref3.toFormData;
              return _context2.abrupt("return", toFormData(this.body, ct));

            case 33:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[11, 15, 19, 27], [20,, 22, 26]]);
    }
    /**
     * Return raw response as Blob
     *
     * @return Promise
     */

  }, {
    key: "blob",
    value: function blob() {
      var ct, buf;
      return regeneratorRuntime.async(function blob$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              ct = this.headers && this.headers.get('content-type') || this[INTERNALS].body && this[INTERNALS].body.type || '';
              _context3.next = 3;
              return regeneratorRuntime.awrap(this.arrayBuffer());

            case 3:
              buf = _context3.sent;
              return _context3.abrupt("return", new _fetchBlob["default"]([buf], {
                type: ct
              }));

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
    /**
     * Decode response as json
     *
     * @return  Promise
     */

  }, {
    key: "json",
    value: function json() {
      var text;
      return regeneratorRuntime.async(function json$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return regeneratorRuntime.awrap(this.text());

            case 2:
              text = _context4.sent;
              return _context4.abrupt("return", JSON.parse(text));

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
    /**
     * Decode response as text
     *
     * @return  Promise
     */

  }, {
    key: "text",
    value: function text() {
      var buffer;
      return regeneratorRuntime.async(function text$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return regeneratorRuntime.awrap(consumeBody(this));

            case 2:
              buffer = _context5.sent;
              return _context5.abrupt("return", new TextDecoder().decode(buffer));

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
    /**
     * Decode response as buffer (non-spec api)
     *
     * @return  Promise
     */

  }, {
    key: "buffer",
    value: function buffer() {
      return consumeBody(this);
    }
  }, {
    key: "body",
    get: function get() {
      return this[INTERNALS].stream;
    }
  }, {
    key: "bodyUsed",
    get: function get() {
      return this[INTERNALS].disturbed;
    }
  }]);

  return Body;
}();

exports["default"] = Body;
Body.prototype.buffer = (0, _nodeUtil.deprecate)(Body.prototype.buffer, 'Please use \'response.arrayBuffer()\' instead of \'response.buffer()\'', 'node-fetch#buffer'); // In browsers, all properties are enumerable.

Object.defineProperties(Body.prototype, {
  body: {
    enumerable: true
  },
  bodyUsed: {
    enumerable: true
  },
  arrayBuffer: {
    enumerable: true
  },
  blob: {
    enumerable: true
  },
  json: {
    enumerable: true
  },
  text: {
    enumerable: true
  },
  data: {
    get: (0, _nodeUtil.deprecate)(function () {}, 'data doesn\'t exist, use json(), text(), arrayBuffer(), or body instead', 'https://github.com/node-fetch/node-fetch/issues/1000 (response)')
  }
});
/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return Promise
 */

function consumeBody(data) {
  var body, accum, accumBytes, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, error, error_;

  return regeneratorRuntime.async(function consumeBody$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          if (!data[INTERNALS].disturbed) {
            _context6.next = 2;
            break;
          }

          throw new TypeError("body used already for: ".concat(data.url));

        case 2:
          data[INTERNALS].disturbed = true;

          if (!data[INTERNALS].error) {
            _context6.next = 5;
            break;
          }

          throw data[INTERNALS].error;

        case 5:
          body = data.body; // Body is null

          if (!(body === null)) {
            _context6.next = 8;
            break;
          }

          return _context6.abrupt("return", _nodeBuffer.Buffer.alloc(0));

        case 8:
          if (body instanceof _nodeStream["default"]) {
            _context6.next = 10;
            break;
          }

          return _context6.abrupt("return", _nodeBuffer.Buffer.alloc(0));

        case 10:
          // Body is stream
          // get ready to actually consume the body
          accum = [];
          accumBytes = 0;
          _context6.prev = 12;
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _context6.prev = 15;
          _iterator = _asyncIterator(body);

        case 17:
          _context6.next = 19;
          return regeneratorRuntime.awrap(_iterator.next());

        case 19:
          _step = _context6.sent;
          _iteratorNormalCompletion = _step.done;
          _context6.next = 23;
          return regeneratorRuntime.awrap(_step.value);

        case 23:
          _value = _context6.sent;

          if (_iteratorNormalCompletion) {
            _context6.next = 35;
            break;
          }

          chunk = _value;

          if (!(data.size > 0 && accumBytes + chunk.length > data.size)) {
            _context6.next = 30;
            break;
          }

          error = new _fetchError.FetchError("content size at ".concat(data.url, " over limit: ").concat(data.size), 'max-size');
          body.destroy(error);
          throw error;

        case 30:
          accumBytes += chunk.length;
          accum.push(chunk);

        case 32:
          _iteratorNormalCompletion = true;
          _context6.next = 17;
          break;

        case 35:
          _context6.next = 41;
          break;

        case 37:
          _context6.prev = 37;
          _context6.t0 = _context6["catch"](15);
          _didIteratorError = true;
          _iteratorError = _context6.t0;

        case 41:
          _context6.prev = 41;
          _context6.prev = 42;

          if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
            _context6.next = 46;
            break;
          }

          _context6.next = 46;
          return regeneratorRuntime.awrap(_iterator["return"]());

        case 46:
          _context6.prev = 46;

          if (!_didIteratorError) {
            _context6.next = 49;
            break;
          }

          throw _iteratorError;

        case 49:
          return _context6.finish(46);

        case 50:
          return _context6.finish(41);

        case 51:
          _context6.next = 57;
          break;

        case 53:
          _context6.prev = 53;
          _context6.t1 = _context6["catch"](12);
          error_ = _context6.t1 instanceof _base.FetchBaseError ? _context6.t1 : new _fetchError.FetchError("Invalid response body while trying to fetch ".concat(data.url, ": ").concat(_context6.t1.message), 'system', _context6.t1);
          throw error_;

        case 57:
          if (!(body.readableEnded === true || body._readableState.ended === true)) {
            _context6.next = 69;
            break;
          }

          _context6.prev = 58;

          if (!accum.every(function (c) {
            return typeof c === 'string';
          })) {
            _context6.next = 61;
            break;
          }

          return _context6.abrupt("return", _nodeBuffer.Buffer.from(accum.join('')));

        case 61:
          return _context6.abrupt("return", _nodeBuffer.Buffer.concat(accum, accumBytes));

        case 64:
          _context6.prev = 64;
          _context6.t2 = _context6["catch"](58);
          throw new _fetchError.FetchError("Could not create Buffer from response body for ".concat(data.url, ": ").concat(_context6.t2.message), 'system', _context6.t2);

        case 67:
          _context6.next = 70;
          break;

        case 69:
          throw new _fetchError.FetchError("Premature close of server response while trying to fetch ".concat(data.url));

        case 70:
        case "end":
          return _context6.stop();
      }
    }
  }, null, null, [[12, 53], [15, 37, 41, 51], [42,, 46, 50], [58, 64]]);
}
/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed   instance       Response or Request instance
 * @param   String  highWaterMark  highWaterMark for both PassThrough body streams
 * @return  Mixed
 */


var clone = function clone(instance, highWaterMark) {
  var p1;
  var p2;
  var body = instance[INTERNALS].body; // Don't allow cloning a used body

  if (instance.bodyUsed) {
    throw new Error('cannot clone body after it is used');
  } // Check that body is a stream and not form-data object
  // note: we can't clone the form-data object without having it as a dependency


  if (body instanceof _nodeStream["default"] && typeof body.getBoundary !== 'function') {
    // Tee instance body
    p1 = new _nodeStream.PassThrough({
      highWaterMark: highWaterMark
    });
    p2 = new _nodeStream.PassThrough({
      highWaterMark: highWaterMark
    });
    body.pipe(p1);
    body.pipe(p2); // Set instance body to teed body and return the other teed body

    instance[INTERNALS].stream = p1;
    body = p2;
  }

  return body;
};

exports.clone = clone;
var getNonSpecFormDataBoundary = (0, _nodeUtil.deprecate)(function (body) {
  return body.getBoundary();
}, 'form-data doesn\'t follow the spec and requires special treatment. Use alternative package', 'https://github.com/node-fetch/node-fetch/issues/1167');
/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param {any} body Any options.body input
 * @returns {string | null}
 */

var extractContentType = function extractContentType(body, request) {
  // Body is null or undefined
  if (body === null) {
    return null;
  } // Body is string


  if (typeof body === 'string') {
    return 'text/plain;charset=UTF-8';
  } // Body is a URLSearchParams


  if ((0, _is.isURLSearchParameters)(body)) {
    return 'application/x-www-form-urlencoded;charset=UTF-8';
  } // Body is blob


  if ((0, _is.isBlob)(body)) {
    return body.type || null;
  } // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)


  if (_nodeBuffer.Buffer.isBuffer(body) || _nodeUtil.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
    return null;
  }

  if (body instanceof _esmMin.FormData) {
    return "multipart/form-data; boundary=".concat(request[INTERNALS].boundary);
  } // Detect form data input from form-data module


  if (body && typeof body.getBoundary === 'function') {
    return "multipart/form-data;boundary=".concat(getNonSpecFormDataBoundary(body));
  } // Body is stream - can't really do much about this


  if (body instanceof _nodeStream["default"]) {
    return null;
  } // Body constructor defaults other things to string


  return 'text/plain;charset=UTF-8';
};
/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param {any} obj.body Body object from the Body instance.
 * @returns {number | null}
 */


exports.extractContentType = extractContentType;

var getTotalBytes = function getTotalBytes(request) {
  var body = request[INTERNALS].body; // Body is null or undefined

  if (body === null) {
    return 0;
  } // Body is Blob


  if ((0, _is.isBlob)(body)) {
    return body.size;
  } // Body is Buffer


  if (_nodeBuffer.Buffer.isBuffer(body)) {
    return body.length;
  } // Detect form data input from form-data module


  if (body && typeof body.getLengthSync === 'function') {
    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
  } // Body is stream


  return null;
};
/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param {Stream.Writable} dest The stream to write to.
 * @param obj.body Body object from the Body instance.
 * @returns {Promise<void>}
 */


exports.getTotalBytes = getTotalBytes;

var writeToStream = function writeToStream(dest, _ref4) {
  var body;
  return regeneratorRuntime.async(function writeToStream$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          body = _ref4.body;

          if (!(body === null)) {
            _context7.next = 5;
            break;
          }

          // Body is null
          dest.end();
          _context7.next = 7;
          break;

        case 5:
          _context7.next = 7;
          return regeneratorRuntime.awrap(pipeline(body, dest));

        case 7:
        case "end":
          return _context7.stop();
      }
    }
  });
};

exports.writeToStream = writeToStream;