"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _headers = _interopRequireDefault(require("./headers.js"));

var _body = _interopRequireWildcard(require("./body.js"));

var _isRedirect = require("./utils/is-redirect.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var INTERNALS = Symbol('Response internals');
/**
 * Response class
 *
 * Ref: https://fetch.spec.whatwg.org/#response-class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */

var Response =
/*#__PURE__*/
function (_Body) {
  _inherits(Response, _Body);

  function Response() {
    var _this;

    var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Response);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Response).call(this, body, options)); // eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition

    var status = options.status != null ? options.status : 200;
    var headers = new _headers["default"](options.headers);

    if (body !== null && !headers.has('Content-Type')) {
      var contentType = (0, _body.extractContentType)(body, _assertThisInitialized(_this));

      if (contentType) {
        headers.append('Content-Type', contentType);
      }
    }

    _this[INTERNALS] = {
      type: 'default',
      url: options.url,
      status: status,
      statusText: options.statusText || '',
      headers: headers,
      counter: options.counter,
      highWaterMark: options.highWaterMark
    };
    return _this;
  }

  _createClass(Response, [{
    key: "clone",

    /**
     * Clone this response
     *
     * @return  Response
     */
    value: function clone() {
      return new Response((0, _body.clone)(this, this.highWaterMark), {
        type: this.type,
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected,
        size: this.size,
        highWaterMark: this.highWaterMark
      });
    }
    /**
     * @param {string} url    The URL that the new response is to originate from.
     * @param {number} status An optional status code for the response (e.g., 302.)
     * @returns {Response}    A Response object.
     */

  }, {
    key: "type",
    get: function get() {
      return this[INTERNALS].type;
    }
  }, {
    key: "url",
    get: function get() {
      return this[INTERNALS].url || '';
    }
  }, {
    key: "status",
    get: function get() {
      return this[INTERNALS].status;
    }
    /**
     * Convenience property representing if the request ended normally
     */

  }, {
    key: "ok",
    get: function get() {
      return this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;
    }
  }, {
    key: "redirected",
    get: function get() {
      return this[INTERNALS].counter > 0;
    }
  }, {
    key: "statusText",
    get: function get() {
      return this[INTERNALS].statusText;
    }
  }, {
    key: "headers",
    get: function get() {
      return this[INTERNALS].headers;
    }
  }, {
    key: "highWaterMark",
    get: function get() {
      return this[INTERNALS].highWaterMark;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Response';
    }
  }], [{
    key: "redirect",
    value: function redirect(url) {
      var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 302;

      if (!(0, _isRedirect.isRedirect)(status)) {
        throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
      }

      return new Response(null, {
        headers: {
          location: new URL(url).toString()
        },
        status: status
      });
    }
  }, {
    key: "error",
    value: function error() {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response[INTERNALS].type = 'error';
      return response;
    }
  }, {
    key: "json",
    value: function json() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var body = JSON.stringify(data);

      if (body === undefined) {
        throw new TypeError('data is not JSON serializable');
      }

      var headers = new _headers["default"](init && init.headers);

      if (!headers.has('content-type')) {
        headers.set('content-type', 'application/json');
      }

      return new Response(body, _objectSpread({}, init, {
        headers: headers
      }));
    }
  }]);

  return Response;
}(_body["default"]);

exports["default"] = Response;
Object.defineProperties(Response.prototype, {
  type: {
    enumerable: true
  },
  url: {
    enumerable: true
  },
  status: {
    enumerable: true
  },
  ok: {
    enumerable: true
  },
  redirected: {
    enumerable: true
  },
  statusText: {
    enumerable: true
  },
  headers: {
    enumerable: true
  },
  clone: {
    enumerable: true
  }
});